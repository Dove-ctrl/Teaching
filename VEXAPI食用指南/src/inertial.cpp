#include "vex.h"

//这里只会介绍常用的函数，其他的可以自己探索

void inertial_API(){
    /* 
        heading()函数和rotation()函数

        这两个函数都代表偏航角，
        如果你经常开飞机，你应该很容易理解这两个函数的含义，
        如果你不怎么开飞机，可以尝试把惯导连接到主控上，
        在主控的设备界面点击你连接好的惯导，上面会有详尽的参数显示，
        你可以通过用手移动惯导，观察数值变化，理解函数的含义。

        需要注意的是，heading()函数的返回值，也就是偏航角度，范围是0-359.99°，
        此时角度的变化并不是在连续的数轴上变化的，角度在超过359.99°时，会突然变成0°，
        因此，在使用这个函数去求角度差值时，可能会出现数学错误。

        rotation()函数也是表示偏航角的角度，但唯一不同的是，
        这个函数的偏航角是没有范围的，因此可以解决上面提到的数学错误，
        但是也不代表这个函数是万能的，因为当你需要绝对位置时，这个函数可能会因为数值过大影响控制算法。
     */
    Inertial.heading();
    Inertial.rotation();

    /* 
        calibrate()和isCalibrating()函数

        calibrate()函数是其实是一个指令，它可以让惯导进行一次校准。

        为什么需要校准？
        如果你像我说的那样，在主控上看过惯导的数据，你可能会发现一个问题，
        你明明没有移动惯导，但是惯导的读数却在变化，
        这是由于惯导工作原理导致的，这时只需要校准就可以了，
        当然，校准时惯导不应该被晃动，同时，校准需要时间，
        因此校准的这段时间内惯导需要保持静止。

        isCalibrating()函数用于检测校准是否在进行，
        如果正在校准，返回true，否则返回false。
     */
    Inertial.calibrate();
    Inertial.isCalibrating();

    /* 
        resetHeading()和resetRotation()函数

        这两个函数会重置惯导的偏航角值，用于确定绝对零点。
     */
    Inertial.resetHeading();
    Inertial.resetRotation();
}