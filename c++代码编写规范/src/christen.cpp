/* 
    命名规范

    这是我尤为看重的地方，命名规范与否直接决定了你代码的上限，
    命名不规范，你有再逆天的逻辑和算法也没用，因为没人能看懂你的代码，跟没有写是没区别的。

    我们会给：类（结构体）、函数、常量、全局变量、静态变量、成员变量、临时变量（参数）等进行命名，
    有两个基本原则：
    1.  含义清晰，不易混淆。
    2.  不和其它模块、系统API的命名空间相冲突。

    下面看示例。
 */

//下面三个是典型的错误命名，但凡你的程序被发现有这种典型错误，你直接别干了，退学吧。

    //含义不明，a可以是任何东西
    int a = 1; 

    //拼音缩写，还要认认真真读一遍才知道写的啥，要是都这样命名，跟猜字游戏有啥区别？
    int woshinidie = 2; 

    //拼音首字母缩写，这个是最可恶的，拼音缩写至少还能知道啥意思，这样命名谁知道你什么意思？
    //你自己看看你能读懂这是啥缩写吗？这是”我就是要你看不懂“和”你有本事来打我“的拼音首字母缩写。
    float wjsynkbd(int nybsldw); 

//下面这是另一类错误命名，一是名字太短，导致含义不明，二是名字太长，代码显得冗长，不方便快速浏览。

    //第三个是较为合适的写法，一般控制在2-3个英文单词即可。
    double vX = 0.123;
    double this_is_encoderX_value = 0.135;
    double X_value = 0.246;

//下面这也是另一类错误命名，使用非公认的缩写，导致含义不明。

    int MV = 12000; //本意是Motor Voltage，但是没有人用这个缩写，这是非公认的。
    int adj_value = 12345; //adj是adjust的简写，这是编程里常出现的一种写法。

//下面是属于和其他API冲突的错误。

    float forward();//forward是vexAPI里的东西，虽然编译不会报错，但是最好不要这样写，因为真的出问题时很难修。

//下面是正确的命名方式，常用的有下划线命名，驼峰式命名，帕斯卡命名（自己上网查）

    int object_num = 0; //代表物体的数目，使用单词object和常用缩写num（number）
    float driveVoltage = 1000; //代表驱动电压，使用单词drive和voltage
    void ControllerBtnCheck(); //代表遥控器按钮状态检查，使用单词controller，check和常用缩写btn（button）
    const int MAX_VELOCITY = 200; //代表最大速度，全部大写表示这是常量

//总结一下就是，用英语单词命名，2-3个就够了，用下划线或大小写区分每个单词，常量全大写，
//不知道有啥缩写能用的就别用缩写，别和其他API冲突，别用拼音！！！